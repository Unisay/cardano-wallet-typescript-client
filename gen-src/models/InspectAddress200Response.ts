/**
 * Cardano Wallet Backend API
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p> 
 *
 * OpenAPI spec version: v2022-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { InspectAddress200ResponsePointer } from './InspectAddress200ResponsePointer';
import { HttpFile } from '../http/http';

export class InspectAddress200Response {
    'addressStyle': InspectAddress200ResponseAddressStyleEnum;
    'stakeReference': InspectAddress200ResponseStakeReferenceEnum;
    /**
    * Can be null for 'Icarus' and 'Byron' styles.
    */
    'networkTag'?: number;
    'spendingKeyHash'?: string;
    'spendingKeyBech32'?: string;
    'stakeKeyHash'?: string;
    'stakeKeyBech32'?: string;
    'scriptHash'?: string;
    'scriptHashBech32'?: string;
    'pointer'?: InspectAddress200ResponsePointer;
    /**
    * Only for 'Icarus' and 'Byron' styles.
    */
    'addressRoot'?: string;
    /**
    * Only for 'Byron' style.
    */
    'derivationPath'?: string;
    /**
    * The raw type field of the address.  Details about possible address types are following (refer also to [cddl](https://github.com/input-output-hk/cardano-ledger/blob/master/eras/alonzo/test-suite/cddl-files/alonzo.cddl)).  | address_type | binary prefix  |   Meaning                                                | | ------------ |:--------------:|:--------------------------------------------------------:| |      0       |  0000          |   base address: keyhash28,keyhash28                      | |      1       |  0001          |   base address: scripthash28,keyhash28                   | |      2       |  0010          |   base address: keyhash28,scripthash28                   | |      3       |  0011          |   base address: scripthash28,scripthash28                | |      4       |  0100          |   pointer address: keyhash28, 3 variable length uint     | |      5       |  0101          |   pointer address: scripthash28, 3 variable length uint  | |      6       |  0110          |   enterprise address: keyhash28                          | |      7       |  0111          |   enterprise address: scripthash28                       | |      8       |  1000          |   byron/icarus                                           | |      14      |  1110          |   reward account: keyhash28                              | |      15      |  1111          |   reward account: scripthash28                           | 
    */
    'addressType'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "addressStyle",
            "baseName": "address_style",
            "type": "InspectAddress200ResponseAddressStyleEnum",
            "format": ""
        },
        {
            "name": "stakeReference",
            "baseName": "stake_reference",
            "type": "InspectAddress200ResponseStakeReferenceEnum",
            "format": ""
        },
        {
            "name": "networkTag",
            "baseName": "network_tag",
            "type": "number",
            "format": ""
        },
        {
            "name": "spendingKeyHash",
            "baseName": "spending_key_hash",
            "type": "string",
            "format": "base16"
        },
        {
            "name": "spendingKeyBech32",
            "baseName": "spending_key_bech32",
            "type": "string",
            "format": "bech32"
        },
        {
            "name": "stakeKeyHash",
            "baseName": "stake_key_hash",
            "type": "string",
            "format": "base16"
        },
        {
            "name": "stakeKeyBech32",
            "baseName": "stake_key_bech32",
            "type": "string",
            "format": "bech32"
        },
        {
            "name": "scriptHash",
            "baseName": "script_hash",
            "type": "string",
            "format": "base16"
        },
        {
            "name": "scriptHashBech32",
            "baseName": "script_hash_bech32",
            "type": "string",
            "format": "bech32"
        },
        {
            "name": "pointer",
            "baseName": "pointer",
            "type": "InspectAddress200ResponsePointer",
            "format": ""
        },
        {
            "name": "addressRoot",
            "baseName": "address_root",
            "type": "string",
            "format": "base16"
        },
        {
            "name": "derivationPath",
            "baseName": "derivation_path",
            "type": "string",
            "format": "base16"
        },
        {
            "name": "addressType",
            "baseName": "address_type",
            "type": "number",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return InspectAddress200Response.attributeTypeMap;
    }

    public constructor() {
    }
}


export type InspectAddress200ResponseAddressStyleEnum = "Shelley" | "Icarus" | "Byron" ;
export type InspectAddress200ResponseStakeReferenceEnum = "none" | "by value" | "by pointer" ;

